#!/usr/bin/env bash
# 
# Execute a given command in (or run the last command of) a terminal emulator.
# 
# Usage:
#   termcommand (--class <CLASS> | --title <TITLE>) [options] -- <command>
# 
# Options:
#   -c --class <CLASS>   class of the terminal (required if --title is not used)
#   -t --title <TITLE>   partial or full window title of the terminal (required
#                        if --class is not used; will override --class if both
#                        are used)
#   -d --delay <TIME>    delay time between focusing the terminal and pasting
#                        the command in it; this is only needed if the command
#                        is pasted too soon, causing none or a part of it to
#                        run; (the recommended starting value is .03 to .1
#                        second)
#   -l --last            run the last command of the terminal instead (will
#                        ignore the command argument)
#   -r --refocus         refocus previously focused window after running command
# 
# Dependencies:
#   xautomation (command "xte"; if xdotool is preferred, follow the instructions
#     at the bottom where xte is used. [Note: Running the command with xdotool
#     is significantly slower as it sends each character individually]).
# 
# Notes:
#   This script should be bound to a keybinding or used in a script.
# 
#   If using the --last option and the last command in the terminal is moved to
#   but not executed, increase the usleep time in the xte command.
# 
#   The class name of a window can be retrieved with "wmctrl -lx" (it will be in
#   the format "<class>.<classname>").
# 

OPTS="$(getopt -q -o c:,t:,d:,l,r --long class:,title:,delay:,last,refocus -n \
    'termcommand' -- "${@}")"
if [ "$?" -ne 0 ]; then
  # output errors as a desktop notification since this script is meant to be
  # used with a keybinding and errors printed to stderr will not be seen.
  notify-send 'termcommand (err): unrecognized option'
  exit 1
fi
eval set -- "${OPTS}"
while true; do
  case "${1}" in
    --class|-c) TERM_CLASS="${2}"; shift;;
    --title|-t) TERM_TITLE="${2}"; shift;;
    --delay|-d)
      [[ ! "${2}" =~ ^[0-9]*(\.[0-9]+)?$ ]] && \
          notify-send 'termcommand (err): invalid time for option --delay' && \
          exit 1
      OPT_AUTOMTN_DELAY_TIME="${2}"
      shift
      ;;
    --last|-l) OPT_LAST_COMMAND=true;;
    --refocus|-r) OPT_REFOCUS=true;;
    --) shift; break;;
    *) break;;
  esac
  shift
done

# The command may still always run correctly if no delay time is given, however,
# on a mid-grade computer, it may rarely paste the command too quickly after the
# terminal window has been focused. This causes only a part of the command to
# run.
if [ -z "${OPT_AUTOMTN_DELAY_TIME}" ]; then
  OPT_AUTOMTN_DELAY_TIME='.02'
fi

if [[ -z "${TERM_CLASS}" && -z "${TERM_TITLE}" ]]; then
  notify-send 'termcommand (err): must use option --class or --title'
  exit 1
fi

if [[ "$#" -eq 0 && -z "${OPT_LAST_COMMAND}" ]]; then
  # uncomment the following to show an error
  # notify-send 'termcommand: no command to execute'
  exit
fi

getWindIdByName() {
  local windIds=("$(wmctrl -l | awk -v srch="${1}" '{$2=$3=""; windName = \
      gensub(/([^ ]*)(.*)/, "\\2", "g", $0)} windName ~ srch {print $1}')")
  [ $((${#windIds[@]})) -ge 1 ] && echo "${windIds[0]}"
}

getFirstWindIdInClass() {
  local classWindIds=($(wmctrl -lx | awk -v class="${1}" '$3 ~ class \
      {print $1}'))
  [ $((${#classWindIds[@]})) -ge 1 ] && echo "${classWindIds[0]}"
}

getActvWindId() {
  echo "$(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5 | rev | cut -c \
      2- | rev | sed 's/^0x/0x0/')"
}

if [ -n "${TERM_TITLE}" ]; then
  termWindId="$(getWindIdByName ${TERM_TITLE})"
else
  termWindId="$(getFirstWindIdInClass "${TERM_CLASS}")"
fi

if [ -n "${termWindId}" ]; then
  if [ "${OPT_REFOCUS}" = 'true' ]; then
    currWindId="$(getActvWindId)"
  fi

  wmctrl -i -a "${termWindId}"
  [ -n "${OPT_AUTOMTN_DELAY_TIME}" ] && sleep "${OPT_AUTOMTN_DELAY_TIME}"

  # To use xdotool, comment the xte code and uncomment the xdotool code.

  if [ "${OPT_LAST_COMMAND}" = 'true' ]; then
    xte 'usleep 25000' 'key Up' 'key Return'

    #------- 1. xdotool -----------

    # xdotool sleep .007 key Up key Return
  else
		xte <<-EOF
			str ${@}
			usleep 14000
			key Return
		EOF

    #------- 2. xdotool -----------

    # xdotool type "${@}"
    # # must run a separate xdotool command as "type" will type everything after
    # # it; also a much higher sleep time is needed as xdotool types each
    # # character (instead of pasting the string).
    # xdotool sleep .5 key Return
  fi

  if [ "${OPT_REFOCUS}" = 'true' ]; then
    [ -n "${OPT_AUTOMTN_DELAY_TIME}" ] && sleep "${OPT_AUTOMTN_DELAY_TIME}"
    wmctrl -i -a "${currWindId}"
  fi
fi

