#!/usr/bin/env bash
# 
# Open a new terminal optionally with an initial command to run.
# 
# A small layer for configuring terminal and window settings is provided.
# 
# Returns:
#   The window ID of the new terminal window.
# 
# Dependencies:
#   xterm (the terminal emulator used)
#   wmctrl (used to get the window ID of the terminal window and output it for
#     the caller)
# 

# ======= CONFIGURATIONS ==============

readonly FONT_FACE='DejaVu Sans Mono'

readonly DEFAULT_FONT_SIZE=12

readonly DEFAULT_GEOMETRY='82x44+190+100'

# ======= ! CONFIGURATIONS ==============

printHelpMessage() {
  echo -ne "\
Open a new xterm terminal optionally with an initial command to run.

Usage:
  newterm [options] -- [initial command]

Options:
  -t --title <TITLE>        title
  -g --geometry <GEOMETRY>  window geometry (WIDTHxHEIGHT+X+Y)
  -s --fs --font-size <SIZE>   font size
  -w --white-bg             use white background
  -h --help                 show help message
"
}

OPTS="$(getopt -o t:g:s:wh --long title:,geometry:,fs:,font-size:,white-bg, \
    --long help -n 'newterm' -- "${@}")"
[ "$?" -ne 0 ] && echo "exiting..." 1>&2 && exit 1
eval set -- "${OPTS}"
while true; do
  case "${1}" in
    --title|-t) OPT_TITLE="${2}"; shift;;
    --geometry|-g) OPT_GEOMETRY="${2}"; shift;;
    --font-size|--fs|-s)
        if [[ ! "${2}" =~ ^[0-9]+$ ]]; then
          echo "newterm: argument for option ${1} must be a number" 1>&2
          exit 1
        else
          OPT_FONT_SIZE="${2}"; shift
        fi;;
    --white-bg|-w) OPT_WHITE_BACKGROUND=true;;
    --help|-h) printHelpMessage; exit;;
    --) shift; break;;
    * ) break;;
  esac
  shift
done

if [ -n "${OPT_TITLE}" ]; then
  allowTtlOps='false'
  title="${OPT_TITLE}"
else
  allowTtlOps='true'
fi

if [ -n "${OPT_FONT_SIZE}" ]; then
  fontSize="${OPT_FONT_SIZE}"
else
  fontSize="${DEFAULT_FONT_SIZE}"
fi

if [ "${OPT_WHITE_BACKGROUND}" = 'true' ]; then
  colorProps='-fg #000000 -bg #FFFFFF'
else
  colorProps='-fg #FFFFFF -bg #000000'
fi

if [ -n "${OPT_GEOMETRY}" ]; then
  geometry="${OPT_GEOMETRY}"
else
  if [ "${OPT_SECOND_SCREEN}" = 'true' ] && [ "$(xrandr --query | grep -c \
      ' connected')" -ge 2 ]; then
    geometry="${SECOND_SCREEN_GEOMETRY}"
  else
    geometry="${DEFAULT_GEOMETRY}"
  fi
fi

# ============================================
#   Utilitiy functions
# ============================================

getWindIdByPid() {
  while IFS= read line; do
    if [[ "${line}" =~ (0x)([0-9a-z]+)([ ][- ][0-9]+[ ])([0-9]*) ]]; then
      local winId="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
      local pid="${BASH_REMATCH[4]}"
      if [ "${pid}" -eq "${1}" ]; then
        echo "${winId}"
        break
      fi
    fi
  done < <(wmctrl -lp)
}

# ============================================
#   Launch terminal
# ============================================

nohup xterm -sl 9000 -xrm "XTerm.vt100.allowTitleOps: ${allowTtlOps}" -title \
    "${title}" -geometry "${geometry}" -fa "${FONT_FACE}" -fs "${fontSize}" \
    ${colorProps} -e bash -c "$(printf '%s\nexec bash' "${*}")" &>/dev/null &
    # "$(printf '%s\nexec bash' "${*}")" here allows any command to be passed
    # in, including a bash Here document.

PID="$!"

sleep .08
WIND_ID="$(getWindIdByPid "${PID}")"

# Check stdout and stderr to see if they point to a terminal; if so, redirect
# to /dev/null to prevent unnecessary output to the terminal (note that the
# window ID is still obtainable in a subprocess).
if test -t 1; then
  exec 1>/dev/null
fi

if test -t 2; then
  exec 2>/dev/null
fi

# echo window ID so caller can obtain it
echo "${WIND_ID}"

