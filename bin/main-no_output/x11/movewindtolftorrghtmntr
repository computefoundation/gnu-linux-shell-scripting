#!/usr/bin/env bash
# 
# Move a window to the left or right monitor.
# 
# This script additionally provides an option to match only windows in a certain
# class.
# 
# Dependencies:
#   wmctrl (used to move the window)
# 
# Notes:
#   The right monitor is the monitor positioned to the right of the leftmost
#   monitor.
# 
#   This solution is hardware independent.
# 
#   The class name of a window can be retrieved with "wmctrl -lx" (it will be in
#   the format "<class>.<classname>").
# 

printHelpMessage() {
  echo -ne "\
movewindtolftorrghtmntr - Move a window to the left or
  right monitor.

Usage
  movewindtolftorrghtmntr (--left|--right) <window ID or
      name>

  window ID or name: ID must be in hexidecimal format.

Options
  -l --left      move to the left monitor (required if 
                 --right is not used)
  -r --right     move to the right monitor (required if
                 --left is not used; will override --left)
  -a --active    move the active window instead (will
                 ignore the window ID or name argument)
  -c --class <CLASS>    match only windows in the
                 class(es) matched by CLASS (case-sensitive)
  -s --all       move all matching windows instead of just
                 the first
  -h             print help message
"
}

OPTS="$(getopt -o l,r,a,c:,s,h --long left,right,active,class:,all,help -n \
    'wind' -- "${@}")"
[ "$?" -ne 0 ] && exit 1
eval set -- "${OPTS}"
while true; do
  case "${1}" in
    --left|-l) readonly DIRECTION='left';;
    --right|-r) readonly DIRECTION='right';;
    --active|-a) OPT_ACTIVE='true';;
    --class|-c) OPT_CLASS="${2}"; shift;;
    --all|-s) OPT_ALL=true;;
    --help|-h) printHelpMessage; exit;;
    --) shift; break;;
    *) break;;
  esac
  shift
done

if [ "$#" -eq 0 ] && [ -z "${OPT_ACTIVE}" ] || [ -z "${DIRECTION}" ]; then
  printHelpMessage
  exit 1
fi

getActvWindId() {
  echo "$(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5 | rev | cut -c \
      2- | rev | sed 's/^0x/0x0/')"
}

getWindClassById() {
  echo "$(xprop -id "${1}" WM_OPT_CLASS | sed -n \
      's/[^"]*"\([^"]*\)",\s"\([^"]*\)"/\1.\2/p')"
}

getWindClassByName() {
  local windClsses=("$(wmctrl -lx | awk -v srchTxt="${1}" '{$1=$2=$4=""; wn = \
      gensub(/([^ ]+[ ]+)(.*)/, "\\2", "g", $0); gsub(/ /, "", wn)} wn ~ \
      srchTxt {print $3}' | sort | uniq)")
  echo "${windClsses[0]}"
}

getWindIdByName() {
  [ "$#" -eq 0 ] && return
  local windIds=("$(wmctrl -l | awk -v srchTxt="${1}" '{$2=$3=""; wn = \
      gensub(/([^ ]*[ ]+)(.*)/, "\\2", "g", $0)} wn ~ srchTxt {print $1}')")
  echo "${windIds[@]}"
}

if [ "${OPT_ACTIVE}" = 'true' ]; then
  ARG_WINDOW="$(getActvWindId)"
else
  ARG_WINDOW="${1}"
fi

if [ -n "${OPT_CLASS}" ]; then
  if [[ "${ARG_WINDOW}" =~ '0x'.* ]]; then
    windClss="$(getWindClassById "${ARG_WINDOW}")"
  else
    windClss="$(getWindClassByName "${ARG_WINDOW}")"
  fi

  if [[ -z "${windClss}" || "${windClss}" != *"${OPT_CLASS}"* ]]; then
    exit
  fi
fi

if [[ "${ARG_WINDOW}" =~ '0x'.* ]]; then
  WINDOW_IDS=("${ARG_WINDOW}")
else
  # Exit if the window name is empty or "Desktop" as it will alter the desktop
  # in the Xfce desktop environment and possibly others.
  if [[ -z "${ARG_WINDOW}" || "${ARG_WINDOW}" = 'Desktop' ]]; then
    exit 1
  fi

  WINDOW_IDS=($(getWindIdByName "${ARG_WINDOW}"))

  if [ "${OPT_ALL}" != 'true' ]; then
    WINDOW_IDS=(${WINDOW_IDS[0]})
  fi
fi

# ============================================
#   Main functions
# ============================================

# Utility function to retrieve the properties of the active window.
setActiveWindowProperties() {
  local xwininfoOut="$(xwininfo -id "${1}")"
  CURR_WIND_X_POS="$(echo "${xwininfoOut}" | grep 'Absolute upper-left X' | \
      awk '{print $4}')"
  CURR_WIND_Y_POS="$(echo "${xwininfoOut}" | grep 'Absolute upper-left Y' | \
      awk '{print $4}')"
  CURR_WIND_WIDTH="$(echo "${xwininfoOut}" | grep Width | awk '{print $2}')"
  CURR_WIND_HEIGHT="$(echo "${xwininfoOut}" | grep Height | awk '{print $2}')"
  CURR_WIND_X_POS_END=$((CURR_WIND_X_POS + CURR_WIND_WIDTH))
}

# Utility function to determine if a right monitor (a monitor positioned to the
# right of the leftmost monitor) is enabled and get its width and offset if so.
isRightMonitorEnabled() {
  if [ -z "${RGHT_MNTR_WIDTH}" ]; then
    IFS=$'\n'
    local xrandrMntrs=($(xrandr --query | grep ' connected'))
    unset IFS

    if [ "${#xrandrMntrs[@]}" -ge 2 ]; then
      for xrandrMntr in "${xrandrMntrs[@]}"; do
        local vals=($(echo "${xrandrMntr}" | perl -ne \
            'm/[^ ]+ connected (?:primary )?([0-9]+)[^+]+\+(\d+).*/; \
            print "$1 $2"'))

        if [ "${#vals[@]}" -eq 2 ]; then
          local wdth="${vals[0]}"
          local offst="${vals[1]}"

          if [[ "${offst}" -gt 0 && (-z "${lwstNonZeroOffst}" || "${offst}" \
              -lt "${lwstNonZeroOffst}") ]]; then
            local lwstNonZeroOffst="${offst}"
            RGHT_MNTR_WIDTH="${wdth}"
            RGHT_MNTR_OFFST="${offst}"
          fi
        fi
      done
    fi
  fi
  [ -z "${RGHT_MNTR_WIDTH}" ] && return 1 || return 0
}

# ============================================
#   Move window
# ============================================

if isRightMonitorEnabled; then
  for windId in "${WINDOW_IDS[@]}"; do
    setActiveWindowProperties "${windId}"
    case "${DIRECTION}" in
      'left')
        if [[ "${CURR_WIND_X_POS_END}" -gt "${RGHT_MNTR_OFFST}" ]]; then
          delta=$((CURR_WIND_X_POS_END - RGHT_MNTR_OFFST))
          [ "${delta}" -gt "${RGHT_MNTR_OFFST}" ] && \
              newXPos=$((RGHT_MNTR_OFFST - CURR_WIND_WIDTH)) || \
              newXPos=$((CURR_WIND_X_POS - RGHT_MNTR_OFFST))
        fi
        ;;
      'right')
        if [[ "${CURR_WIND_X_POS}" -le "${RGHT_MNTR_OFFST}" ]]; then
          newXPos=$((CURR_WIND_X_POS + RGHT_MNTR_OFFST))
          newXEndPos=$((newXPos + CURR_WIND_WIDTH))
          rightMntrEnd=$((RGHT_MNTR_OFFST + RGHT_MNTR_WIDTH))
          [ "${newXEndPos}" -gt "${rightMntrEnd}" ] && \
              newXPos=$((rightMntrEnd - CURR_WIND_WIDTH))
        fi
        ;;
    esac
    geom="${newXPos},${CURR_WIND_Y_POS},${CURR_WIND_WIDTH},"
    geom+="${CURR_WIND_HEIGHT}"
    wmctrl -i -r "${windId}" -b remove,maximized_vert,maximized_horz
    wmctrl -i -r "${windId}" -e "0,${geom}"
  done
fi

