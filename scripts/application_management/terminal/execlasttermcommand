#!/usr/bin/env bash
# 
# File:
#   execlasttermcommand
# 
# Description:
#   Execute the last command of a terminal emulator.
# 
# Usage:
#   execlasttermcommand (--class <TERM_CLASS> | --title <TERM_TITLE>) [options]
#           -- <command>
# 
# Options:
#   -c --class <TERM_CLASS>    class of the terminal emulator (required if
#                              --title is not used)
#   -t --title <TERM_TITLE>    partial or full window title of the terminal
#                              emulator (required if --class is not used; will
#                              override --class if both are used)
# 
#   -r --refocus    refocus previous window after running command
# 
# Exit codes:
#   0: command executed
#   1: command not executed
# 
# Dependencies:
#   xautomation (if xdotool is preferred, follow the instructions at the bottom
#     where xte is used. [Note: Running the command with xdotool is
#     significantly slower as it sends each character individually]).
# 
# Notes:
#   This utility should be used with a keybinding or in a script.
# 
#   If the last command in the terminal emulator is  moved to but not executed,
#   increase the usleep time in the xte command.
# 

# ======= CONFIGURATIONS ==============

# This is the delay time for running the xautomation events in the terminal
# emulator after it has been focused. With no delay time, the terminal emulator
# may focused too quickly, causing none or only a part of the events to succeed.
# (Note: This delay time is also applied before refocusing the previously
# focused window).
readonly XEVENTS_DELAY_TIME='.18'

# ======= ! CONFIGURATIONS ==============

OPTS="$(getopt -q -o c:,t:,r --long class:,title:,refocus -n \
    'execlasttermcommand' -- "${@}")"
if [ "$?" -ne 0 ]; then
  # output errors as a desktop notification since this script is meant to be
  # used with a keybinding and errors printed to stderr will not be seen.
  notify-send 'execlasttermcommand (err): unrecognized option'
  exit 1
fi
eval set -- "${OPTS}"

while true; do
  case "${1}" in
    --class|-c) TERM_CLASS="${2}"; shift;;
    --title|-t) TERM_TITLE="${2}"; shift;;
    --refocus|-r) OPT_REFOCUS=true;;
    --) shift; break;;
    *) break;;
  esac
  shift
done

if [ -z "${TERM_CLASS}" ] && [ -z "${TERM_TITLE}" ]; then
  notify-send 'execlasttermcommand (err): must use option --class or --title'
  exit 1
fi

# ============================================
#   Utilitiy functions
# ============================================

getWindIdByName() {
  local windIds=("$(wmctrl -l | awk -v srch="${1}" '{$2=$3=""; windName = \
      gensub(/([^ ]*)(.*)/, "\\2", "g", $0)} windName ~ srch {print $1}')")
  [ $((${#windIds[@]})) -ge 1 ] && echo "${windIds[0]}"
}

getFirstWindIdInClass() {
  local classWindIds=($(wmctrl -lx | awk -v class="${1}" '$3 ~ class \
      {print $1}'))
  [ $((${#classWindIds[@]})) -ge 1 ] && echo "${classWindIds[0]}"
}

getActvWindId() {
  echo "$(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5 | rev | cut -c \
      2- | rev | sed 's/^0x/0x0/')"
}

# ============================================
#   Get the window ID of the terminal
# ============================================

if [ -n "${TERM_TITLE}" ]; then
  termWindId="$(getWindIdByName ${TERM_TITLE})"
else
  termWindId="$(getFirstWindIdInClass "${TERM_CLASS}")"
fi

# ============================================
#   Execute the X events
# ============================================

if [ -n "${termWindId}" ]; then
  [ "${OPT_REFOCUS}" = 'true' ] && currWindId="$(getActvWindId)"

  wmctrl -i -a "${termWindId}"
  [ -n "${XEVENTS_DELAY_TIME}" ] && sleep "${XEVENTS_DELAY_TIME}"

  # To use xdotool, comment the xte code sections and uncomment the xdotool code
  # sections.
  
  # ---------  xte  ---------

  xte 'usleep 25000' 'key Up' 'key Return'

  # ---------  xdotool  ---------

  # xdotool sleep .007 key Up key Return

  if [ "${OPT_REFOCUS}" = 'true' ]; then
    [ -n "${XEVENTS_DELAY_TIME}" ] && sleep "${XEVENTS_DELAY_TIME}"
    wmctrl -i -a "${currWindId}"
  fi
fi

