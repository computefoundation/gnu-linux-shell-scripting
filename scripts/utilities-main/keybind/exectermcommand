#!/usr/bin/env bash
# 
# Execute a command in (or run the last command of) a terminal emulator.
# 
# Usage:
#   exectermcommand (--class <TERM_CLASS> | --title <TERM_TITLE>) [options] --
#           <command>
# 
#   -c --class <TERM_CLASS>    class of the terminal emulator (required if
#                              --title is not used)
#   -t --title <TERM_TITLE>    partial or full window title of the terminal
#                              emulator (required if --class is not used; will
#                              override --class if both are used)
# 
# Options:
#   -l --last            run the last command of the terminal emulator instead
#                        (will ignore the command argument)
#   -r --refocus         refocus previous window after running command
# 
# Dependencies:
#   xautomation (if xdotool is preferred, follow the instructions at the bottom
#     where xte is used. [Note: Running the command with xdotool is
#     significantly slower as it sends each character individually]).
# 
# Notes:
#   This utility should be used with a keybinding or in a script.
# 
#   If using the --last option and the last command in the terminal emulator is
#   moved to but not executed, increase the usleep time in the xte command.
# 
#   The class name of a window can be retrieved with "wmctrl -lx" (it will be in
#   the format "<class>.<classname>").
# 

# ======= CONFIGURATIONS ==============

# This is the delay time for pasting the given command to the terminal emulator.
# With no delay time, the terminal emulator may focused too quickly, causing
# none or only a part of the command to be pasted. (Note: this delay time is
# also applied when refocusing the previously focused window).
readonly PASTE_DELAY_TIME='.15'

# ======= ! CONFIGURATIONS ==============

OPTS="$(getopt -q -o c:,t:,l,r --long class:,title:,last,refocus -n \
    'exectermcommand' -- "${@}")"
if [ "$?" -ne 0 ]; then
  # output errors as a desktop notification since this script is meant to be
  # used with a keybinding and errors printed to stderr will not be seen.
  notify-send 'exectermcommand (err): unrecognized option'
  exit 1
fi
eval set -- "${OPTS}"
while true; do
  case "${1}" in
    --class|-c) TERM_CLASS="${2}"; shift;;
    --title|-t) TERM_TITLE="${2}"; shift;;
    --last|-l) OPT_LAST_COMMAND=true;;
    --refocus|-r) OPT_REFOCUS=true;;
    --) shift; break;;
    *) break;;
  esac
  shift
done

if [[ -z "${TERM_CLASS}" && -z "${TERM_TITLE}" ]]; then
  notify-send 'exectermcommand (err): must use option --class or --title'
  exit 1
fi

if [[ "$#" -eq 0 && -z "${OPT_LAST_COMMAND}" ]]; then
  # uncomment the following to show an error.
  # notify-send 'exectermcommand: no command to execute'
  exit
fi

getWindIdByName() {
  local windIds=("$(wmctrl -l | awk -v srch="${1}" '{$2=$3=""; windName = \
      gensub(/([^ ]*)(.*)/, "\\2", "g", $0)} windName ~ srch {print $1}')")
  [ $((${#windIds[@]})) -ge 1 ] && echo "${windIds[0]}"
}

getFirstWindIdInClass() {
  local classWindIds=($(wmctrl -lx | awk -v class="${1}" '$3 ~ class \
      {print $1}'))
  [ $((${#classWindIds[@]})) -ge 1 ] && echo "${classWindIds[0]}"
}

getActvWindId() {
  echo "$(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5 | rev | cut -c \
      2- | rev | sed 's/^0x/0x0/')"
}

if [ -n "${TERM_TITLE}" ]; then
  termWindId="$(getWindIdByName ${TERM_TITLE})"
else
  termWindId="$(getFirstWindIdInClass "${TERM_CLASS}")"
fi

if [ -n "${termWindId}" ]; then
  if [ "${OPT_REFOCUS}" = 'true' ]; then
    currWindId="$(getActvWindId)"
  fi

  wmctrl -i -a "${termWindId}"
  [ -n "${PASTE_DELAY_TIME}" ] && sleep "${PASTE_DELAY_TIME}"

  # To use xdotool, comment the xte code sections and uncomment the xdotool code
  # sections.

  if [ "${OPT_LAST_COMMAND}" = 'true' ]; then
    # ---------  xte  ---------
    xte 'usleep 25000' 'key Up' 'key Return'

    # ---------  xdotool  ---------
    # xdotool sleep .007 key Up key Return
  else
    # ---------  xte  ---------
    # Xte sometimes fails to completely paste a string with more than 249
    # characters. As a result, a string with more than 249 characters is pasted
    # by every 249 character part.
    argStr="${@}"
    if [ "${#argStr}" -gt 249 ]; then
      for ((i=0; i<=${#argStr}; i+=249)); do
        xte "str ${argStr:${i}:249}"
      done
      xte 'key Return'
    else
			xte <<-EOF
				str ${@}
				usleep 14000
				key Return
			EOF
    fi

    # ---------  xdotool  ---------
    # xdotool type "${@}"
    # # must run a separate xdotool command as "type" will type everything after
    # # it; also a much higher sleep time is needed as xdotool types each
    # # character (instead of pasting the string).
    # xdotool sleep .5 key Return
  fi

  if [ "${OPT_REFOCUS}" = 'true' ]; then
    [ -n "${PASTE_DELAY_TIME}" ] && sleep "${PASTE_DELAY_TIME}"
    wmctrl -i -a "${currWindId}"
  fi
fi

