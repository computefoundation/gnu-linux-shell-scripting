#!/usr/bin/env bash
# 
# File:
#   execinbg
# 
# Description:
#   Execute a command in the background.
# 
# Usage:
#   execinbg <command>
# 
# Returns:
#   The PID of the executed command or nothing if stdout points to a terminal.
# 
# Source:
#   (link is now dead)
#   http://felixmilea.com/2014/12/running-bash-commands-background-properly/
# 
# Notes:
#   This script "will remove the command from the shellâ€™s job list and redirect
#   all of its output to /dev/null unless a file descriptor other than a
#   terminal is provided."
# 
#   Using this script has the following advantage over using the nohup command
#   directly:
#       The script works by putting together all the arguments as a string and
#       evaluating it as a command. The script also checks stdout and stderr to
#       see if they point to a terminal, and if they do, it will pass /dev/null
#       instead, otherwise it will let the command inherit the specified stdout
#       and stderr.
# 

if test -t 1; then
  exec 1>/dev/null
fi
if test -t 2; then
  exec 2>/dev/null
fi

nohup "${@}" &>/dev/null &

# Print the PID of the executed command so the caller can retrieve it.
echo "$!"

