#!/usr/bin/env bash
# 
# File:
#   findfileforcmd
# 
# Description:
#   Recursively find a file or directory for a command.
# 
# Examples:
#   # Recursively find a file with a name containing "stat" for command "vim".
#   findfileforcmd {vim} stat
# 
#   # Recursively find a directory with a name containing "docume" for command
#   # "thunar".
#   findfileforcmd {thunar} --d docume
# 
#   # same as previous, except return the third occurrence
#   findfileforcmd {thunar} --d --3 docume
# 
# Usage:
#   findfileforcmd {<command_to_execute>} [options] <partial_or_full_file_name>
#         [directory]
# 
#   [directory]: directory to search in; default is current.
# 
# Options:
#   --d        return a directory instead of a file
#   --<1-9>    return the specified occurrence
#   --a        return all occurrences
#   --p        print the returned files or directories only
# 
# Exit codes:
#   0: file or directory found
#   1: error occurred or file or directory not found
# 
# Notes:
#   The options for this utility use double dashes to avoid overriding the
#   options for the command in the brackets.
# 

# ======= CONFIGURATIONS ==============

# Set this variable to "true" to support file names with spaces. If true and
# all occurrences are returned using option --a, only the last occurrence
# will be used by most execute command.
readonly SUPPORT_FILE_NAMES_WITH_SPACES='false'

# ======= ! CONFIGURATIONS ==============

# ============================================
#   Get the execute command
# ============================================

# Note: The following could be done using command "set", however, command "set"
# removes all arguments containing "?".

for ((x=1; x<="$#"; x++)); do
  arg="${@:x:1}"

  if [ -z "${arg##*'}'*}" ]; then
    EXECUTE_COMMAND="${@:1:x}"
    shift "${x}"
  fi
done

if [ -z "${EXECUTE_COMMAND}" ]; then
  echo -e  'findfileforcmd: invalid arguments:\nexecute command not specified' \
      1>&2
  exit 1
fi

EXECUTE_COMMAND="${EXECUTE_COMMAND#{}"
EXECUTE_COMMAND="${EXECUTE_COMMAND%\}}"

# ============================================
#   Process prerequisites
# ============================================

if [ "$#" -eq 0 ]; then
  echo 'findfileforcmd: no file or directory name specified' 1>&2
  exit 1
fi

# ============================================
#   Process options and arguments
# ============================================

OPTS="$(getopt -o '#' --long d,1,2,3,4,5,6,7,8,9,a,p -n 'findfileforcmd' -- \
    "${@}")"
[ "$?" -ne 0 ] && exit 1
eval set -- "${OPTS}"

while true; do
  case "${1}" in
    --d) OPT_RETURN_DIRECTORIES='true';;
    --1|--2|--3|--4|--5|--6|--7|--8|--9) OPT_RETURN_OCCURRENCE="${1#'--'}";;
    --a) OPT_RETURN_ALL_OCCURRENCES='true';;
    --p) OPT_PRINT_ONLY='true';;
    --) shift; break;;
    * ) break;;
  esac
  shift
done

# ============================================
#   Process find command options
# ============================================

if [ "$#" -ge 2 ]; then
  findDir="${2}"
else
  findDir='.'
fi

if [ "${OPT_RETURN_DIRECTORIES}" = 'true' ]; then
  findOptType='-type d'
else
  findOptType='-type f'
fi

if [ -z "${OPT_RETURN_OCCURRENCE}" ] && [ "${OPT_RETURN_ALL_OCCURRENCES}" != 'true' ]; then
  findOptsPrintQuit='-print -quit'
fi

# ============================================
#   Begin find process
# ============================================

findOutput="$(find "${findDir}" ${findOptType} -name "*${1}*" \
    ${findOptsPrintQuit} 2>/dev/null)"

if [ -z "${findOutput}" ]; then
  echo "findfileforcmd: file or directory \"${@}\" not found" 1>&2
  exit 1
fi

if [ "${OPT_RETURN_ALL_OCCURRENCES}" != 'true' ]; then
  if [ -n "${OPT_RETURN_OCCURRENCE}" ]; then
    findOutputNumOccurs="$(echo "${findOutput}" | wc -l)"

    if [ "${OPT_RETURN_OCCURRENCE}" -gt "${findOutputNumOccurs}" ]; then
      OPT_RETURN_OCCURRENCE="${findOutputNumOccurs}"
    fi
    findOutput="$(echo "${findOutput}" | sed "${OPT_RETURN_OCCURRENCE}q;d")"
  else
    findOutput="$(echo "${findOutput}" | sed "1q;d")"
  fi
fi

if [ "${OPT_PRINT_ONLY}" = 'true' ]; then
  echo "${findOutput}"
else
  if [ "${SUPPORT_FILE_NAMES_WITH_SPACES}" = 'true' ]; then
    ${EXECUTE_COMMAND} "${findOutput}"
  else
    ${EXECUTE_COMMAND} ${findOutput}
  fi
fi

