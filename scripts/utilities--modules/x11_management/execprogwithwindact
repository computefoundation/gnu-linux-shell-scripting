#!/usr/bin/env bash
# 
# File:
#   execprogwithwindact
# 
# Description:
#   Execute a program with an action on the resulting window.
# 
# Dependencies:
#   wmctrl (used to determine if the window is already open and get the window
#     ID of and move the new window)
# 
# Notes:
#   This solution relies on the PID of the opened program to get its window ID
#   or title. The returned PID will sometimes be different than the PID of the
#   running process. In this case, retrieving the window ID or title will fail.
# 
#   If this module is used with a command that uses quotes, the quotes must be
#   within outer quotes to be interpreted.
#     Example:
#       <command> --opt="opt_arg"
#       # would have to be
#       <command> --opt='"opt_arg"'
# 

# ======= CONFIGURATIONS ==============

# Window action; it receives the window ID as a hexidecimal or the window title
# if --title is used.
WIND_ACTION() {
  { [ -z "${WIND_TITLE}" ] && local idOrTitle="${1}" && local iopt='-i'; } || \
      local idOrTitle="${WIND_TITLE}"

  # Create custom window action below
  
  # wmctrl "${iopt}" -r "${idOrTitle}" -b remove,maximized_vert,maximized_horz
}

# ======= ! CONFIGURATIONS ==============

printHelpMessage() {
  [ "${1}" = 'full' ] && echo -e 'Execute a command and an action on the' \
      'resulting window.\n'

echo -ne "\
Usage:
  execprogwithwindact [options] -- <command> <window class> <delay time (sec)>

  command:            command to run
  window class:       class of the window that is opened by the command
                      (only used to check if the window is already open;
                      no action will be taken if so)
  delay time (sec):   time required to wait for the window to open (min:
                      .1; max: 25)

Options:
  -t --title <TITLE>  specify the window title to use instead of the class
  -g --geometry       geometry to use for positioning the window (will
                      ignore the window action); format: X,Y,WIDTH,HEIGHT
  --pre-execute       command to pre-execute (sometimes needed, e.g., when
                      having to cd to a directory first)
  -h --help           help message
"
}

OPTS="$(getopt -o t:,g:,h --long title:,geometry:,pre-execute:,help -n \
    'execprogwithwindact' -- "${@}")"
[ "$?" -ne 0 ] && echo "exiting..." 1>&2 && exit 1
eval set -- "${OPTS}"
while true; do
  case "${1}" in
    --title|-t) WIND_TITLE="${2}"; shift;;
    --geometry|-g)
      if [[ ! "${2}" =~ [0-9]*,[0-9]*,[0-9]*,[0-9] ]]; then
        echo -e 'execprogwithwindact: geometry not in correct format' 1>&2
        printHelpMessage
        exit 1
      else
        GEOMETRY="${2}"
        shift
      fi;;
    --pre-execute) PRE_EXEC_CMD="${2}"; shift;;
    --help|-h) printHelpMessage full; exit;;
    --) shift; break;;
    * ) break;;
  esac
  shift
done

if [ "$#" -eq 0 ]; then
  echo -e 'execprogwithwindact: no arguments' 1>&2
  printHelpMessage
  exit 1
elif [ "$#" -lt 3 ]; then
  echo -e 'execprogwithwindact: invalid number of arguments' 1>&2
  printHelpMessage
  exit 1
else
  # must get all arguments before last two because if the command contains
  # "${@}" (e.g. exeandmo.. "/usr/bin/chromium ${@}" <class> [..]), then the
  # command and the arguments in "${@}"  will be interpreted as separate
  # arguments.
  COMMAND="${@:1:$(($#-2))}"
  WIND_CLASS="${@: -2:1}"
  DELAY_TIME_BFR_RUNNING_ACT="${@: -1:1}"
fi

if [[ "${DELAY_TIME_BFR_RUNNING_ACT}" =~ ('.'*)([0-9]*) ]]; then
  if [[ -z "${BASH_REMATCH[1]}" && "${BASH_REMATCH[2]}" -gt 25 ]]; then
    echo -e 'execprogwithwindact: delay time invalid: should not\n  be greater'\
        'than 25' 1>&2
    exit 1
  fi
else
  echo -e 'execprogwithwindact: delay time invalid: leading decimal\n  and'\
      'numbers allowed only' 1>&2
  exit 1
fi

# ============================================
#   Utilitiy functions
# ============================================

isWindOpenByClass() {
  local classWindIds=($(wmctrl -lx | awk -v class="${1}" '$3 ~ class \
      {print $1}'))
  [[ "${#classWindIds[@]}" -gt 0 ]] && return 0 || return 1
}

getWindIdByPid() {
  while IFS= read line; do
    if [[ "${line}" =~ (0x)([0-9a-z]+)([ ][- ][0-9]+[ ])([0-9]*) ]]; then
      local winId="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
      local pid="${BASH_REMATCH[4]}"
      if [ "${pid}" -eq "${1}" ]; then
        echo "${winId}"
        break
      fi
    fi
  done < <(wmctrl -lp)
}

# ============================================
#   Run the command
# ============================================

if [ -n "${PRE_EXEC_CMD}" ]; then
  ${PRE_EXEC_CMD} # do not quote
fi

eval "(${COMMAND}) &"
PID=$!

if [ -n "${PID}" ] && ! isWindOpenByClass "${WIND_CLASS}"; then
  sleep "${DELAY_TIME_BFR_RUNNING_ACT}"

  [ -z "${WIND_TITLE}" ] && windId="$(getWindIdByPid "${PID}")"

  if [[ -n "${windId}" || -n "${WIND_TITLE}" ]]; then
    if [ -n "${GEOMETRY}" ]; then
      { [ -z "${WIND_TITLE}" ] && idOrTitle="${windId}" && iopt='-i'; } || \
          idOrTitle="${WIND_TITLE}"
      wmctrl "${iopt}" -r "${idOrTitle}" -e "0,${GEOMETRY}" &
    else
      WIND_ACTION "${windId}" &
    fi
  fi
fi

