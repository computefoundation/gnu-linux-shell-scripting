#!/usr/bin/env bash
# 
# File:
#   mongodbutils
# 
# Description:
#   Generic MongoDB utility functions
# 
# Usage:
#   mongodbutils <database_name> <action> [action_arguments]
# 
# Options:
#   -u    The name of the database user
#   -p    The password of the database user
# 

if [ "$#" -lt 2 ]; then
  echo -e 'mongodbutils: invalid number of arguments; database name\n  and'\
      'action required' 1>&2
  exit 1
fi

while getopts u:p: OPT; do
  case "${OPT}" in
    u) AUTH_OPTS="-u ${OPTARG}"
       ;;
    p) AUTH_OPTS+=" -p ${OPTARG}"
       ;;
  esac
done
shift $((OPTIND - 1))

readonly DB_NAME="${1}"
readonly ACTION="${2}"
shift 2

case "${ACTION}" in
  # Action:
  #   import
  # Description:
  #   Import data to a collection from a JSON file.
  # Usage:
  #   ... import <json_file_name> [collection_name]
  #           collection name:     collection name in the database; default is
  #                                the JSON file name without the extension
  # Note:
  #   If needing to import multiple MongoDB documents in a single JSON array,
  #   append option "--jsonArray" to the end of the mongoimport command.
  'import')
    [ "$#" -eq 0 ] && \
        echo "mongodbutils: no directory specified" 1>&2 && \
        exit 1
    [ ! -f "${1}" ] && \
        echo "mongodbutils: cannot import: file \"${1}\" does not exist" && \
        exit 1

    if [ "$#" -ge 2 ]; then
      opts+="--collection ${2}"
    fi
    mongoimport --db "${DB_NAME}" ${AUTH_OPTS} --file "${1}" ${opts}
    ;;

  # Action:
  #   export
  # Description:
  #   Export data from a collection to a JSON file.
  # Usage:
  #   ... export <collection_name> [directory]
  #           collection name:     collection name in the database
  #           directory:           directory to output JSON file to; default is
  #                                current
  'export')
    if [ "$#" -ge 1 ]; then
      collName="${1}"
      opts+="--collection ${collName}"

      if [ "$#" -ge 2 ]; then
        opts+=" --out ${2}/${collName}.json"
      else
        opts+=" --out ${collName}.json"
      fi
    fi
    mongoexport --db "${DB_NAME}" ${AUTH_OPTS} ${opts} --jsonArray
    ;;

  # Action:
  #   drop
  # Description:
  #   Drop the database.
  # Usage:
  #   ... drop
  'drop')
    mongo "${DB_NAME}" --eval 'db.dropDatabase()'
    ;;

  # Action:
  #   drop_all
  # Description:
  #   Drop all databases.
  # Usage:
  #   ... drop_all
  'drop_all')
    /usr/bin/mongo <<-EOF
			db.getMongo().getDBNames().forEach(function(database) {
				if (database != 'local' && database != 'admin') {
					db = db.getMongo().getDB(database);
					db.dropDatabase();
					print('dropped database ' + db.getName());
				}
			})
		EOF
    ;;

  # Action:
  #   restore
  # Description:
  #   Restore data from one or more BSON files.
  # Usage:
  #   ... restore <bson_file_or_directory_containing_bson_files>
  'restore')
    [ -z "${1}" ] && \
        echo "mongodbutils: no directory specified" 1>&2 && \
        exit 1
    [ ! -d "${1}" ] && \
        echo "mongodbutils: directory \"${1}\" does not exist" 1>&2 && \
        exit 1
    mongorestore ${AUTH_OPTS} "${1}"
    ;;

  # Action:
  #   dump
  # Description:
  #   Dump the database to BSON files.
  # Usage:
  #   ... dump [collection_name] [directory]
  #           collection name:     collection name in the database; default is
  #                                all
  #           directory:           directory to output BSON files to; default is
  #                                current
  'dump')
    if [ "$#" -ge 1 ]; then
      opts+="--collection ${1}"

      if [ "$#" -ge 2 ]; then
        opts=" --out ${2}"
      fi
    fi
    mongodump --db "${DB_NAME}" ${AUTH_OPTS} ${opts}
    ;;

  *)
    echo "mongodbutils: unknown action \"${ACTION}\"" 1>&2
    exit 1
    ;;

esac

